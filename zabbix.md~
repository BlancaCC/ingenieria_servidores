# Instalación de zabbix  


## Instalción en ubuntu  

```
sudo wget https://repo.zabbix.com/zabbix/3.4/ubuntu/pool/main/z/zabbix-release/zabbix-release_3.4-1+xenial_all.deb
dpkg -i zabbix-release_3.4-1+xenial_all.deb
apt update

apt install zabbix-server-mysql
apt install zabbix-proxy-mysql
apt install zabbix-frontend-php
```
### Creación de la base de datos  

```
- En mi caso no tenía instalado mysql `apt install mariadb-server`.



create database zabbix_server character set utf8 collate utf8_bin;
grant all privileges on zabbix_server.* to zabbix@localhost identified by 'secreto';
create database zabbix_proxy character set utf8 collate utf8_bin;
grant all privileges on zabbix_proxy.* to zabbix@localhost identified by 'secreto';

```
### Importamos los esquemas  

```
zcat /usr/share/doc/zabbix-server-mysql/create.sql.gz | mysql -uroot -pise zabbix_server
zcat /usr/share/doc/zabbix-proxy-mysql/schema.sql.gz | mysql -uroot -pise zabbix_proxy


```

## Conocimiento relevante sobre la práctica 

### Estrategias de pull y push en monitorización 
 
 *Zabbix* utiliza los dos modos, aunque por defecto lo hace en pull.  
#### Push

(Empujar). 
Ejemplo en `nagios`.  
- Paradigma tradicional
- Sistema centralizado
- Los clientes que quieren ser minitorizados, envían la información al servidor centralizado (zabbix) en este caso. - Reduce la carga del servidor principal (no está ocupado haciendo los push) .
- Parecido a estrategia interrucción (cuando se produce evento significativo se comunica). 
- Problema no tienes control en qué momento te llega la información (servidor central saturado).


#### Pull 
- muestreol, estrategia más antigua 
- va servidor a servidor preguntando por los datos, (muestreo en secuencia).
- La información se almacena en cada servidor hasta que el central lo consulta. 
Lo usa `prometheus` 


### Arquitectura de zabbix, procesos que intervienen  

#### Servidor  
Núcleo es el que recopila los datos, en nuestro caso será *sql* aunque pordrían ser otras como postgre, bases de datos memoria ...  En la actualidad la mayoría utilizan bases de datos especializadas (en series temporales o documentales)
 

####  Agentes  
- Procesos que corren en sistema a morizar.
- Por lo general un apache o un mysql en background.
- Cuando zabbix server le pida los datos se los devolverá. 
- Agente toma medida locales también: memoria, CPU, entradas/salidas...
- Agente tiene capacidad de almacenar métricas durante un tiempo. 
- Cuando zabbix se las pide las manda todas.

#### Proxy  

- Necesario para escalar: cuando un servidor no es capaz de muestrear a todos los servicios.   
- Es un server pequeñito, que muestrea a servicios locales; el server entonces lo que hace es consultar a los proxys.  
- Nos interesa ya que el tiempo de abertura en TCP/IP es muy grande y nos interesa que cuando esa conexión se realice nos de toda la información posible.  

#### Get  

- Implenta un interfaz de tipo rest, para consultar agentes de tipo zabbix.  
- Útil para depurar problemas; inlcuso podriamos desarrollar nuestros propios clientes.   

 



### fuentes 
- bases de datos en series temporales: https://tienda.digital/2019/08/06/que-son-las-bases-de-datos-de-series-temporales/  

- base de datos en memoria: https://es.wikipedia.org/wiki/Base_de_datos_en_memoria  
- bases de datos documentales: https://es.wikipedia.org/wiki/Base_de_datos_documental

